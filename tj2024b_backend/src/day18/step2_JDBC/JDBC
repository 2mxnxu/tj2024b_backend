[JDBC]
	1. [J] java [D] data [B] base [C] connect : 자바 데이터베이스 연동
		-> JAVA 와 DB 서버를 연동하는 기술
	2. JDBC 라이브러리
		-> 라이브러리 : 미리 만들어진 클래스/인터페이스 들
		1. JDBC MYSQL 라이브러리 다운로드
		2. 내 프로젝트 MYSQL JDBC 라이브러리 등록
		
	3. DB연동 코드
		1. 연동한 JDBC 라이브러리 클래스 로드하기, 일반예외 발생
		Class.forName("com.mysql.cj.jdbc.Driver");
			- mysql : com.mysql.cj.jdbc.Driver
			- oracle : oracle.jdbc.driver.OracleDriver
		2. 지정한 DB서버와 계정정보가 일치 했을때 DB 연동 시도하고 성공시 연동 구현체를 반환
		DriverManager.getConnection("jdbc:mysql://ip주소:PORT/DB명", "root", "1234");
			- local : "jdbc:mysql://localhost:3306/DB명", "root", "1234"
			
			- 연동된 결과를 인터페이스에서 조작할 수 있도록 하는 코드.
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydb0103", "root", "1234");
			
	4. JDBC 핵심 인터페이스
		* 인터페이스란? 서로 다른 클래스들 간의 동일한 목적하의 서로 다른 기능 수행하는 타입, *추상메소드
		1. Connection
			예] 서로 다른 DB 회사에서 제공하는 클래스들을 하나의 타입(인터페이스)에서 인스턴스 사용. p.343
			즉] 서로 다른 DB 회사들은 자바 Connection 인터페이스의 추상메소드를 구체화 했다.
			Connection conn = DriverManager.getConnection("mysql");
			Connection conn = DriverManager.getConnection("oracle");
			Connection conn = DriverManager.getConnection("mariaDB");

			1. 추상메소드 : 
				conn.prepareStatement("SQL문법") : 연동된 DB에 SQL문법 기재하고 PreparedStatement 반환.
					
		2. PreparedStatement
			1. 추상메소드 :
				ps.executeQuery();		: select 기재된 SQL을 실행하고, 처리된 레코드를 조작할 수 있는 ResultSet 반환
				ps.executeUpdate();		: insert, update, delete 기재된 SQL를 실행하고, 처리된 레코드 수 반환
		3. ResultSet
			1. 추상메소드 
				rs.next();				: select 결과 조회된 레코드들 중에서 다음 레코드 이동, 다음레코드가 있으면 true, 없으면 false 반환
					* 레코드 : 행/가로 단위 데이터들
					* 만약에 레코드(행) 6개 이면 next()는 6번 실행이 가능하다.
					*	while(rs.next()) 회원목록보기, 게시물전체조회
						if(rs.next()) 아이디찾기, 비밀번호 찾기, 로그인, 게시물개별조회
						
				rs.getXXX("속성명") : 현재 ResultSet가 조회중인 레코드에서 속성값 반환
					* 속성명 : 값의 대표적인 이름	* 속성값 : 속성의 값 
					ex) 속성명 : 나이				속성값 : 27
					* 변수명/변수값, 속성명/속성값, 멤버변수명/멤버변수 값, 필드명/필드값
					* XXX : 속성명의 타입, SQL int --> JAVA .getInt(), SQL varchar --> JAVA .getString()
				